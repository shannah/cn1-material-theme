package com.example.materialtheme;

import static com.codename1.ui.CN.*;
import com.codename1.ui.*;
import com.codename1.ui.layouts.*;
import com.codename1.io.*;
import com.codename1.ui.plaf.*;
import com.codename1.ui.util.Resources;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MaterialTheme {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
   

    public void start() {
        if(current != null){
            current.show();
            return;
        }

        if (false) {
            new IOSTextRegressionTestForm().show();
            return;
        }

        Form hi = new Form("Hi World", BoxLayout.y());

        Toolbar tb = new Toolbar();

        hi.setToolbar(tb);
        tb.setTitle("Hi World");
        tb.addMaterialCommandToLeftSideMenu("Inbox", FontImage.MATERIAL_INBOX, evt -> {});
        tb.addMaterialCommandToLeftSideMenu("Favourites", FontImage.MATERIAL_FAVORITE, evt -> {});
        tb.addMaterialCommandToLeftSideMenu("Bookmarks", FontImage.MATERIAL_BOOKMARK, evt -> {});
        hi.add(new Label("Hello World"));

        Button buttons = new Button("Text Button");

        Button outlineButton = new Button("Outline Button", "OutlinedButton");
        hi.add(outlineButton);
        hi.add(buttons);
        outlineButton.addActionListener(evt -> {
            InfiniteProgressContainer cnt = new InfiniteProgressContainer(null);
            cnt.show();
            CN.setTimeout(3000, () -> {
                cnt.dispose();
            });
        });

        Button containedButton = new Button("Contained Button", "ContainedButton");
        //containedButton.getStyle().setElevation(0);
        //containedButton.getAllStyles().setElevation(4);
        //containedButton.getPressedStyle().setElevation(0);
        hi.add(containedButton);

        Button checkElevation = new Button("Print el");
        checkElevation.addActionListener(evt->{
            System.out.println("Elevation is "+containedButton.getStyle().getElevation());
        });
        hi.add(checkElevation);

        Button showDialog = new Button("Show Dialog");
        showDialog.addActionListener(evt -> {
            Dialog.show("Hello World", "This is a Dialog", "OK", "Cancel");
        });
        hi.add(showDialog);



        ComboBox comboBox = new ComboBox("Red", "Green", "Blue");
        comboBox.setUIID("OutlinedComboBox");
        hi.add("OutlinedComboBox");
        hi.add(comboBox);

        comboBox = new ComboBox("Red", "Green", "Blue");
        hi.add("ComboBox");
        hi.add(comboBox);

        Button testCompoundBorder = new Button("Compound Border");
        Border lineBorder = Border.createLineBorder(1, 0xd6d6d6);
        Border emptyBorder = Border.createEmpty();
        Border newBorder = Border.createCompoundBorder(lineBorder, emptyBorder, lineBorder, lineBorder);
        testCompoundBorder.getAllStyles().setBorder(newBorder);

        hi.add(testCompoundBorder);

        hi.show();
    }
    
    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

}
